import os
import sys
import glob

################################################################################

cmd_options = {
    'verbose'   :          ['0','1']    
}

def validate_option(key, value, env):
    if key not in cmd_options:
        raise ValueError("Unknown switch {0}.".format(key))
    if value not in cmd_options[key]:
        raise ValueError("Unknown {0} \"{1}\". Options are {2}.\n\n".format(key,value,','.join(cmd_options[key])))

cmd_vars = Variables()
cmd_vars.AddVariables(
     (
        'verbose',                                         # key
        '',                                                # help
        cmd_options['verbose'][0],                         # default
        validate_option,                                   # validator
        int,                                               # converter
    )
)

################################################################################

env = DefaultEnvironment(ENV = os.environ, tools=['cc', 'c++', 'ar', 'gnulink'], variables = cmd_vars)

################################################################################

build_dir = 'build'
toolchain = 'arm-none-eabi'
src_dirs  = ['src/SConscript']
verbose   = env['verbose']

################################################################################

env.Replace(CC          = toolchain + '-gcc')
env.Replace(CXX         = toolchain + '-g++')
env.Replace(AS          = toolchain + '-as')
env.Replace(OBJCOPY     = toolchain + '-objcopy')
env.Replace(OBJDUMP     = toolchain + '-objdump')
env.Replace(AR          = toolchain + '-ar')
env.Replace(RANLIB      = toolchain + '-ranlib')
env.Replace(NM          = toolchain + '-nm')
env.Replace(SIZE        = toolchain + '-size')

env.Append(CFLAGS       = '-mthumb')
env.Append(CFLAGS       = '-mcpu=cortex-m3')
env.Append(CFLAGS       = '-ffunction-sections')
env.Append(CFLAGS       = '-fdata-sections')
env.Append(CFLAGS       = '-fstrict-aliasing')
env.Append(CFLAGS       = '-fshort-enums')
env.Append(CFLAGS       = '-fomit-frame-pointer')
env.Append(CFLAGS       = '-Wstrict-prototypes')
env.Append(CFLAGS       = '-std=c99')
env.Append(CFLAGS       = '-Wall')
env.Append(CFLAGS       = '-pedantic')
env.Append(CFLAGS       = '-Og')
env.Append(CFLAGS       = '-g')
env.Append(CFLAGS       = '-ggdb')

################################################################################

if not verbose:
   env[    'CCCOMSTR']  = "Compiling          $SOURCE"
   env[   'CXXCOMSTR']  = "Compiling          $SOURCE"
   env[  'SHCCCOMSTR']  = "Compiling (shared) $TARGET"
   env[    'ARCOMSTR']  = "Archiving          $TARGET"
   env['RANLIBCOMSTR']  = "Indexing           $TARGET"
   env[  'LINKCOMSTR']  = "Linking            $TARGET"
   env['SHLINKCOMSTR']  = "Linking (shared)   $TARGET"
   env[  'INSTALLSTR']  = "Installing         $TARGET"

################################################################################

env.Append(
    CPPDEFINES = [
        'CC2538_USE_ALTERNATE_INTERRUPT_MAP',
        'ENABLE_ASSERT'
    ]
)

env.Append(
    CPPPATH = [
        os.path.join('#','inc'),
        os.path.join('#','src'),
    ]
)

SConscript(src_dirs, variant_dir = build_dir, duplicate = 0, exports = {'env':env})
